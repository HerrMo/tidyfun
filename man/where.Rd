% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/where.R
\name{where}
\alias{where}
\alias{in_range}
\alias{\%inr\%}
\title{Find out where functional data fulfills certain conditions.}
\usage{
where(f, cond, return = c("all", "first", "last", "range", "any"), arg)

in_range(f, r)

f \%inr\% r
}
\arguments{
\item{f}{a \code{tf} object}

\item{cond}{a logical expression on \code{value} that defines the condition about
the function values, see examples and details.}

\item{return}{for each entry in \code{f}, \code{where} either returns \emph{all} \code{arg} for
which \code{cond} is true, the \emph{first}, the \emph{last} or their \emph{range} or logical
flags whether the functions fullfill the condition \emph{any}where. For
\code{"range"}, note that \code{cond} may not be true for all \code{arg} values in this
range, though, this is not checked.}

\item{arg}{optional \code{arg}-values on which to evaluate \code{f} and check \code{cond},
defaults to \code{arg(f)}.}

\item{r}{used to specify a range, only the minimum and maximum of \code{r} are used.}
}
\value{
\code{return = "any"} returns a logical vector, the others a list of
numeric a vectors of the same length as \code{f}.
}
\description{
This function allows to define a logical expression about the function values
and returns the argument values for which that condition is true.

\code{in_range} and its infix-equivalent return \code{TRUE} for all
values in \code{f} that are within the range of values in \code{r}.
}
\details{
Entries in \code{f} that do not fulfill \code{cond} anywhere yield \code{numeric(0)}.\cr
\code{cond}  is evaluated as a \code{\link[dplyr:filter]{dplyr::filter()}}-statement on a \code{data.frame}
containing a single entry in \code{f} with columns \code{arg} and \code{value}, so all
the usual \code{dplyr} tricks are available, see examples.\cr
Any condition evaluates to \code{NA} on \code{NA}-entries in \code{f}.
}
\examples{
  lin <- 1:4 * tfd(seq(-1, 1,l = 11), seq(-1, 1, l = 11))
  where(lin, value \%inr\% c(-1, .5))
  where(lin, value \%inr\% c(-1, .5), "range")
  a <- 1
  where(lin, value > a, "first")
  where(lin, value < a, "last")
  where(lin, value > 2, "any")

  set.seed(4353)
  plot(f <- rgp(5, 11L), pch = as.character(1:5), points = TRUE)
  where(f, value == max(value))
  # where is the function increasing/decreasing:
  where(f, value > dplyr::lag(value, 1, value[1]))
  where(f, value < dplyr::lead(value, 1, value[n()]))
  # where are the (interior) extreme points:
  where(f, 
    sign(c(diff(value)[1], diff(value))) !=
      sign(c(diff(value), diff(value)[n()-1])))
  # where for arg > .5 is the function positive:
  where(f, arg > .5 & value > 0)
}
